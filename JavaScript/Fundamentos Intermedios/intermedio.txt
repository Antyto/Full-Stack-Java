1. Sigma - Implementa una función sigma(num) que, dado un número, devuelve la suma de todos los enteros positivos (incluyendo el número dado). Ej: sigma(3) = 6 (1+2+3); sigma(5) = 15 (1+2+3+4+5).

var sum = 0;

  function sigma(x) {
    for (var i = 0; i <= x; i++) {
        sum += i;
    }
    return sum;
}
console.log(sigma(5));


2. Factorial - Escribe una función factorial(num) que, dado un número, devuelva el producto (multiplicación) de todos los enteros positivos (incluyendo el número dado). Por ejemplo: factorial(3) = 6 (1*2*3); factorial(5) = 120 (1*2*3*4*5).
var multiplicacion= 1;

function factorial(x) {

    for (var i = 1; i <= x; i++) {
        multiplicacion *= i;
    }
    return multiplicacion;
}
factorial(3);
console.log(multiplicacion);



3. Fibonacci - Crea una función para generar números de Fibonacci. En esta famosa secuencia matemática, cada número es la suma de las dos anteriores, partiendo con los valores 0 y 1. Tu función debería aceptar un argumento, un índice en la secuencia (donde 0 corresponde al valor inicial, 4 corresponden al valor cuatro más tarde, etc). Ejemplos: fibonacci(0) = 0 (dado), fibonacci(1) = 1 (dado), fibonacci(2) = 1 (fib(0)+fib(1), o 0+1), fibonacci(3) = 2 (fib(1) + fib(2)3, o 1+1), fibonacci(4) = 3 (1+2), fibonacci(5) = 5 (2+3), fibonacci(6) = 8 (3+5), fibonacci(7) = 13 (5+8). Haz esto primero sin usar recursión. Si no sabes qué es una recursión, no te preocupes puesto que vamos a introducir este concepto en la Parte 2 de esta actividad.

var arr=[0,1];
var count=0;  
function fibonacci(n){
  for(var i = 0; i < n; i++) {
       arr.push(arr[i]+arr[arr.length-1]);
       }
  return arr;
   }
console.log(fibonacci(7));



4. Array: Penúltimo: Devuelve el penúltimo elemento del array. Dado [42,true,4,”Liam”, 7] devuelve “Liam”. Si el array es muy pequeño, devuelve null.  
var arr=[42,true,4,"Liam",7];
var resultado=0;
function penultimo(n){
  for(var i = 0; i < arr.length; i++) {
      resultado=arr[arr.length-2];
       }
  if(arr.length<2) {
    return null;
  }
  return resultado;
   }
console.log(penultimo(resultado));



5. Array: “N” último: Devuelve el elemento “N” último. Dado ([5,2,3,6,4,9,7],3], devuelve 6. Si el array es muy pequeño, devuelve null. 
function n(arr, y) {
  for(var i=0; i<arr.length; i++) {}
    if (arr.length < y) {
        return null;
    }
  if(arr.length<2) {
    return null;
  }
    return arr[arr.length - y];
}
console.log(n([5,2,3,6,4,9,7],3));



6. Array: Segundo más grande: Devuelve el segundo elemento más grande de un array. Dado [42,1,4,3.14,7], devuelve 7.  Si el array es muy pequeño, devuelve null.
function n(arr) { 
  var penul=0;

  for(var i=0; i<arr.length; i++) {
    if (arr[i]<arr[i-1]){
     penul = arr[i - 1];
     arr[i - 1] = arr[i];
     arr[i] = penul;
    }
   if(arr.length<2) {
    return null;
     }
  }
  return arr[arr.length-2];
}
console.log(n([42,1,4,3.14,7]));



7. Doble Problema Par: Crea una función que cambie un array dado duplicando cada uno de sus elementos en una posición par, y manteniendo el orden original. Convierte [4, "Ulysses", 42, false]   a    [4,4, "Ulysses", "Ulysses", 42, 42, false, false].

function repeat(arreglo) {
     for (var i = arreglo.length - 1; i >= 0; i--) {
         arreglo[2 * i + 1] = arreglo[i];
         arreglo[2 * i] = arreglo[i];
     }
     return arreglo;
}
var arreglo=[4, 'Ulysses', 42, false];
repeat(arreglo);
console.log(arreglo);



Bonus: Crea una función Fib(n) que devuelve el enésimo número Fibonacci. Usa recursión para esto.
function fib(n) {
  var x=0;
  if(n===0 || n===1) {
    return n;
  }
  return fib(n-2)+fib(n-1);
}
console.log(fib(7));
